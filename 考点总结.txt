Matrix Manipulation
>Transpose Matrix: Leetcode 867[Easy]【易错题】

*Parentheses
0. A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.
>Remove the Invalid Parentheses: Lintcode 2506[Easy]【易错题】


*Binary Tree
1. Inorder Traversal/Level Order Traversal/Postorder Traversal/Vertical Order Traversal
%BFS/DFS
%Recursion
%Iteration
%Get Leaf Nodes
>Lintcode 67[Easy]
>Lintcode 68[Easy]
>Lintcode 69[Easy]
>Lintcode 878[Medium]
>Max Width of Binary Tree: Lintcode 1101[Medium]
2. Tree Paths/Tree Properties
%Recursion
%Iteration
>Same Tree: Leetcode 100[Easy]
>Invert Binary Tree: Leetcode 226[Easy]
>Binary Tree Path Sum: Lintcode 376[Easy]
>Binary Tree Right Side View: Leetcode 199[Medium][易错题]
3. Bottom-Up/Top-Down
>Lintcode 596[Easy]
>Most Frequent Subtree Sum: Leetcode 508[Medium]


*Binary Search Tree (BST)
0. Definition
Binary search tree (BST) is a special form of a binary tree with the binary search properties:
a. The value in each node must be greater than (or equal to) any values stored in its left subtree.
b. The value in each node must be less than (or equal to) any values stored in its right subtree.
a.b. -> c. Inorder traversal of a binary search tree is sorted.
审题时注意看清是否允许相等
1. Search/Insert/Delete
>Search In a Binary Search Tree: Lintcode 1524[Easy]/Leetcode 700[Easy]
>Insert into a Binary Search Tree: Leetcode 701[Medium]
2. Validation
>Leetcode 98[Medium], Lintcode 95[Medium]
3. Properties
>Closest Binary Search Tree Value: Lintcode 900[Easy]/Leetcode 270[Easy]
>Unique Binary Search Trees: Leetcode 96[Medium]/Lintcode 163[Medium]
>Unique Binary Search Trees II: Leetcode 95[Medium]

Data Structures
* Linked List
>Swap Nodes in Pairs: Lintcode 451[Easy]/Leetcode 24[Medium]

Advanced Data Structures

*Segment Tree

*Trie (Prefix Tree)
Implementation
>Lintcode 442[Medium] 
Serialization/Deserialization
>Lintcode 527[Hard] 

*Bit Operation
>Power of Two: Lintcode 1314[Easy]/Leetcode 231[Easy]

Permutation
>Next Permutation: Lintcode 52[Medium]/Leetcode 31[Medium]
BFS
>Permutations II: Lintcode 16[Medium]

*Union Find
>Set Union: Lintcode 1396[Medium]

*Set/Hashmap
>Tuple with Same Product: Leetcode 1726[Medium]
>Check If a String Contains All Binary Codes of Size K: Leetcode 1461[Medium]

*BFS/DFS
%多源点BFS
> Zombie in Matrix: Lintcode 598[Medium]

*DP
>Subsets: Leetcode 78[Medium]
>Subsets II: Leetcode 90[Medium]
